substitutions:
  # GPIO Pins
  pin_doorbell_switch: GPIO33 # Doorbell button (to ground)
  pin_doorbell_light: GPIO32 # Doorbell light (to ground)



  # LED Effects
  fast_pulse_effect_name: "Fast Pulse"
  fast_pulse_transition: 0.1s
  fast_pulse_interval: 0.1s
  min_brightness: 0%
  max_brightness: 100%



  default_volume: '100' # Default volume (in range 0...100)




esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${comment}
  compile_process_limit: 1

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended


# Enable logging
logger:

ota:
  - platform: esphome
    password: "3f6786b29f445e0ac078c0bfec10c81d"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Doorbell-Sound Fallback Hotspot"
    password: "cWavxIxc6o5K"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
#captive_portal:

# Allow provisioning Wi-Fi via serial
#improv_serial:

#dashboard_import:
#  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
#  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
#esp32_improv:
#  authorizer: none

# To have a "next url" for improv serial
#web_server:
#  port: 80
#  version: 3  


api:
  encryption:
    key: "Tl2rJtTss0xoQ792MStUvP3Lopg0qZX50jRWxrQ8y3E="




# Switch to set lighting of doorbell (e.g. during night)
switch:
  - platform: template
    name: "Doorbell LED"
    id: doorbell_led
    icon: "mdi:lightbulb"
    turn_on_action:
      - light.turn_on:
          id: doorbell_led_internal
          effect: "None"
    turn_off_action:
      - light.turn_off:
          id: doorbell_led_internal



number:
  - platform: template
    name: "Volume"
    id: var_volume
    icon: "mdi:volume-high"
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    initial_value: ${default_volume}


event:
  - platform: template
    name: Doorbell button
    id: doorbell_event
    device_class: doorbell
    event_types: 
      - button_pressed
    on_event:
      then:
        - lambda: |-
            ESP_LOGI("${TAG}", "Doorbell button pressed event %s triggered.", event_type.c_str());


# button to test the doorbell
button:
  - platform: template
    name: "Test"
    icon: "mdi:run"
    entity_category: diagnostic
    on_press:
      then:
        - script.execute: trigger_doorbell
    


light: # Status auf LED anzeigen, die zudem schaltbar ist als EntitÃ¤t 
  - platform: status_led
    name: "Onboard Status LED"
    icon: "mdi:led-on"
    id: "onboard_led"
    output: onboard_led_output
    entity_category: diagnostic

  - platform: monochromatic
    name: "Doorbell LED"
    id: "doorbell_led_internal"
    output: doorbell_light_output
    effects:
      - pulse:
          name: ${fast_pulse_effect_name}
          transition_length: ${fast_pulse_transition}
          update_interval: ${fast_pulse_interval}
          min_brightness: ${min_brightness}
          max_brightness: ${max_brightness}
    internal: true



output: 
# Interne LED an GPIO2 nutzen 
  - id: onboard_led_output
    platform: gpio
    pin: GPIO2

# PWM output
  - id: doorbell_light_output
    platform: ledc
    pin: ${pin_doorbell_light}


binary_sensor:
  - platform: gpio
    name: "Doorbell Button"
    # device_class: window --> no device class for simple switches available, just use defaults
    pin:
      number: ${pin_doorbell_switch}
      mode:
        input: true
        # contacts to ground so activate pull up 
        pullup: true
      # When button is pressed, signal is low - need to invert so that sensor is high when doorbell button is pressed
      inverted: true 
    filters:
      - delayed_on: 10ms # debounce
    on_press:
      - script.execute: trigger_doorbell


